<?php
/**
 * Created by JetBrains PhpStorm.
 * User: Sascha Presnac
 * Date: 19.05.13
 * Taken from http://webedition.svn.sourceforge.net/viewvc/webedition/trunk/tests/we/include/we_browserDetectTest.php?revision=4446&view=markup
 */

require_once 'PHPUnit/Framework.php';
$_SERVER["HTTP_USER_AGENT"]='Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/4.0; GTB6.6; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.2; .NET4.0C)';

require_once dirname(__FILE__) . '/../../../../webEdition/we/include/we_browserDetect.inc.php';
require_once dirname(__FILE__) . '/../../../../webEdition/we/include/we_browser_check.inc.php';

/**
 * Test class for we_browserDetect.
 * Generated by PHPUnit on 2010-12-05 at 16:13:23.
 */
class we_browserDetectTest extends PHPUnit_Framework_TestCase {

//strings taken from http://www.zytrax.com/tech/web/browser_ids.htm
    private $browsers = array(
        //opera
        array('str' => 'Opera/9.80 (X11; Linux i686; U; en-GB) Presto/2.6.30 Version/10.62', 'name' => 'opera', 'version' => '10.62', 'os' => 'unix', 'supported'=>true),
        array('str' => 'Opera/9.80 (J2ME/MIDP; Opera Mini/5.1.21214/19.916; U; en) Presto/2.5.25', 'name' => 'opera', 'version' => '9.80', 'os' => 'unknown', 'supported'=>true),
        array('str' => 'Opera/9.52 (Windows NT 5.1; U; en)', 'name' => 'opera', 'version' => '9.52', 'os' => 'win', 'supported'=>true),
        //Safari
        array('str' => 'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_4; en-us) AppleWebKit/533.17.8 (KHTML, like Gecko) Version/5.0.1 Safari/533.17.8', 'name' => 'safari', 'version' => '5.0', 'os' => 'mac', 'supported'=>true),
        array('str' => 'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_7; en-us) AppleWebKit/525.28.3 (KHTML, like Gecko) Version/3.2.3 Safari/525.28.3', 'name' => 'safari', 'version' => '3.2', 'os' => 'mac', 'supported'=>true),
        //MSIE
        array('str' => 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)', 'name' => 'ie', 'version' => '9.0', 'os' => 'win', 'supported'=>true),
        array('str' => 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; GTB6.5; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; InfoPath.1; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET4.0C)', 'name' => 'ie', 'version' => '8.0', 'os' => 'win', 'supported'=>true),
        array('str' => 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; FunWebProducts; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506; Windows-Media-Player/10.00.00.3990)', 'name' => 'ie', 'version' => '7.0', 'os' => 'win', 'supported'=>true),
        //array('str' => 'Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; Rogers HiÂ·Speed Internet; (R1 1.3))', 'name' => 'ie', 'version' => '6.0', 'os' => 'win'),
        array('str' => 'Mozilla/4.0 (compatible; MSIE 4.01; Windows NT 5.0)', 'name' => 'ie', 'version' => '4.01', 'os' => 'win', 'supported'=>false),
        array('str' => 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; GTB6.6; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.2; .NET4.0C)', 'name' => 'ie', 'version' => '8.0', 'os' => 'win', 'supported'=>true),
        array('str' => 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/4.0; GTB6.6; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.2; .NET4.0C)', 'name' => 'ie', 'version' => '7.0', 'os' => 'win', 'supported'=>true),
        //Chrome
        array('str' => 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.472.63 Safari/534.3', 'name' => 'chrome', 'version' => '6.0', 'os' => 'win', 'supported'=>false),
        array('str' => 'Mozilla/5.0 (X11; U; Linux i686; en-US) AppleWebKit/532.4 (KHTML, like Gecko) Chrome/4.0.233.0 Safari/532.4', 'name' => 'chrome', 'version' => '4.0', 'os' => 'unix', 'supported'=>false),
        //FF
        array('str' => 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8) Gecko/20051111 Firefox/1.5 BAVM/1.0.0', 'name' => 'firefox', 'version' => '1.5', 'os' => 'unix', 'supported'=>true),
        array('str' => 'Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.2.11) Gecko/20101012 Firefox/3.6.11', 'name' => 'firefox', 'version' => '3.6', 'os' => 'win', 'supported'=>true),
        array('str' => 'Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10.5; en-US; rv:1.9.0.3) Gecko/2008092414 Firefox/3.0.3', 'name' => 'firefox', 'version' => '3.0', 'os' => 'mac', 'supported'=>true),
        array('str' => 'Mozilla/5.0 (X11; U; Darwin Power Macintosh; en-US; rv:1.8.0.12) Gecko/20070803 Firefox/1.5.0.12 Fink Community Edition', 'name' => 'firefox', 'version' => '1.5', 'os' => 'mac', 'supported'=>true),
        array('str' => 'Mozilla/4.0 (Linux 2.6.33.7-desktop-2mnb) Java/1.6.0_22', 'name' => 'java', 'version' => '1.6.0_22', 'os' => 'unknown', 'supported'=>false),
    );
    /**
     * @var    we_browserDetect
     * @access protected
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
        ini_set("display_errors", 1);
        error_reporting(E_ALL);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {

    }

    /**
     * @todo Implement testGetBrowser().
     */
    public function testGetBrowser() {

//echo $BROWSER.' '.$SYSTEM.' '.$out;
        foreach ($this->browsers as $b) {
            $tmp = new we_browserDetect($b['str']);
            $issupported = checkSupportedBrowser();
            $this->assertEquals($b['name'], $tmp->getBrowser(), 'Failure String: ' . $b['str']);
            $this->assertEquals($b['supported'], $issupported, 'Supported not correct');
        }
    }

    /**
     * @todo Implement testGetBrowserVersion().
     */
    public function testGetBrowserVersion() {
        foreach ($this->browsers as $b) {
            $tmp = new we_browserDetect($b['str']);
            $this->assertEquals($b['version'], $tmp->getBrowserVersion(), 'Failure String: ' . $b['str']);
        }
    }

    /**
     * @todo Implement testGetSystem().
     */
    public function testGetSystem() {
        foreach ($this->browsers as $b) {
            $tmp = new we_browserDetect($b['str']);
            $this->assertEquals($b['os'], $tmp->getSystem(), 'Failure String: ' . $b['str']);
        }
    }

}
